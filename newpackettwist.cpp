#include "StdAfx.h"
#include "gsex.h"
#include "newpackettwist.h"

std::vector<_NEW_OPCODES_TWIST> g_vNewOpcTwist
{// S17, 1.19.75 KOR
		{ 0xF1,0xF3,0x3A,
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x12,0xFD,0xFE},
		{0x00,0x02,0x01,0x03,0x04,0x05,0x06,0x12,0xFD,0xFE},
		{0x00,0xFD,0xFE,0x03,0x04,0x05,0x06,0x12,0x02,0x01}},

		{ 0xF3,0x52,0x82,
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x30,0x31,0x34,0x35,0x40,0x50,0x51,0x52,0x53,0x60},
		{0x60,0x26,0x06,0x00,0x04,0x05,0x15,0x07,0x08,0x10,0x11,0x16,0x13,0x14,0x01,0x21,0x20,0x12,0x22,0x23,0x24,0x25,0x26,0x31,0x02,0x34,0x35,0x40,0x50,0x51,0x03,0x03,0x30},
		{0x04,0x00,0x07,0x14,0x20,0x60,0x25,0x06,0x15,0x26,0x53,0x12,0x52,0x51,0x05,0x30,0x23,0x21,0x50,0x34,0x08,0x13,0x32,0x10,0x31,0x03,0x22,0x35,0x11,0x01,0x16,0x24,0x40}},

		{ 0x00,0x4A,0x00,{},{},{}},
		{ 0x03,0x31,0x03,{},{},{}},
		{ 0x0E,0x24,0x0E,{},{},{}},
		{ 0x18,0x83,0x53,{},{},{}},
		{ 0x19,0x26,0x19,{},{},{}},
		{ 0x22,0xC1,0x32,{},{},{}},
		{ 0x23,0xB2,0xCB,{},{},{}},
		{ 0x24,0x3A,0x41,{},{},{}},
		{ 0x26,0xC2,0x55,{},{},{}},
		{ 0x30,0x90,0x4A,{},{},{}},
		{ 0x31,0xC0,0x31,{},{},{}},
		{ 0x32,0xB7,0x9F,{},{},{}},
		{ 0x33,0x97,0x33,{},{},{}},
		{ 0x34,0x57,0x18,{},{},{}},
		{ 0x36,0x43,0xF1,{},{},{}},
		{ 0x37,0x61,0x22,{},{},{}},
		{ 0x3A,0x19,0x54,{},{},{}},
		{ 0x3C,0xCA,0xC6,{},{},{}},
		{ 0x3D,0xE5,0x3D,{},{},{}},
		{ 0x3E,0x33,0x71,
			{0x01,0x03,0x07,0x08,0x09,0x10,0x11,0x20,0x21,0x22},
			{},
			{0x01,0x30,0x39,0x32,0x09,0x03,0x11,0x20,0x21,0x22}},
		{ 0x3F,0x9D,0x36,
			{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x10},
			{},
			{0x06,0x01,0x02,0x12,0x04,0x05,0x06,0x07,0x00}},
		{ 0x40,0xE2,0x40,{},{},{}},
		{ 0x41,0x41,0xEC,{},{},{}},
		{ 0x43,0x34,0x43,{},{},{}},
		{ 0x4A,0x42,0x86,{},{},{}},
		{ 0x4B,0x4B,0xA0,{},{},{}},
		{ 0x4C,0xC4,0xB1,{0x00,0x01,0x02,0x03,0x10,0x11},{},{0x10,0x01,0x02,0x03,0x00,0x11}},
		{ 0x4D,0x03,0x87,
			{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x30,0x31,0x32,0x33,0x34,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47},
			{0x2B,0x0F,0x02,0x03,0x04,0x05,0x06,0x31,0x19,0x3B,0x33,0x27,0x00,0x2C,0x16,0x17,0x18,0x30,0x28,0x2D,0x38,0x26,0x3A,0x28,0x29,0x28,0x28,0x28,0x28,0x12,0x01,0x15,0x32,0x33,0x34,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47},
			{0x36,0x11,0x3B,0x42,0x45,0x15,0x03,0x14,0x3C,0x33,0x27,0x0F,0x2B,0x16,0x12,0x2E,0x29,0x19,0x06,0x25,0x2C,0x01,0x46,0x44,0x31,0x2D,0x00,0x28,0x24,0x40,0x05,0x30,0x48,0x10,0x26,0x43,0x02,0x23,0x38,0x18,0x17,0x34,0x39}},
		{ 0x50,0xC3,0x96,{},{},{}},
		{ 0x51,0x0E,0xC3,{},{},{}},
		{ 0x52,0x4C,0xB7,{},{},{}},
		{ 0x53,0x50,0x9A,{},{},{}},
		{ 0x54,0xA7,0xC1,{},{},{}},
		{ 0x55,0x40,0xC2,{},{},{}},
		{ 0x61,0xC8,0x61,{},{},{}},
		{ 0x66,0x72,0x66,{},{},{}},
		{ 0x71,0x22,0x4C,{},{},{}}, // ping test not needed
		{ 0x81,0x73,0x91,{},{},{}},
		{ 0x82,0xEC,0x95,{},{},{}},
		{ 0x83,0x86,0xB3,{},{},{}},
		{ 0x86,0x55,0x52,{},{},{}},
		{ 0x87,0x01,0x95,{},{},{}},
		{ 0x90,0x90,0x3E,{},{},{}},
		{ 0x91,0x66,0x30,{},{},{}},
		{ 0x95,0x95,0xA2,{},{},{}},
		{ 0x96,0x96,0xBD,{},{},{}},
		{ 0x97,0x81,0x97,{},{},{}},
		{ 0x9A,0x18,0xF3,{},{},{}},
		{ 0xA0,0xB1,0x81,{},{},{}},
		{ 0xA2,0x51,0x83,{},{},{}},
		{ 0xA7,0x9F,0x3F,{},{},{}},
		{ 0xA9,0xCB,0xE5,{},{},{}},
		{ 0xB1,0x4B,0x73,{},{},{}},
		{ 0xB2,0x30,0xCA,
			{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20},
			{},
			{0x01,0x07,0x02,0x06,0x1B,0x13,0x17,0x1D,0x03,0x05,0x20,0x04,0x18,0x1A,0x11,0x15,0x1F,0x1C,0x10,0x08,0x1E,0x00,0x1C,0x16,0x19,0x12,0x09}},
		{ 0xB3,0xA0,0x4B,{},{},{}},
		{ 0xB7,0x3E,0xC2,{0x00,0x01,0x02,0x04},{0x00,0x01,0x02,0x04},{0x03,0x00,0x01,0x04}},
		{ 0xBD,0x3C,0xC8,{0x00,0x02,0x03,0x04,0x05,0x07,0x08,0x09,0x0C},{0x00,0x02,0x09,0x04,0x05,0x07,0x08,0x03,0x0C},{0x04,0x02,0x09,0x05,0x0C,0x00,0x08,0x07,0x03}},
		{ 0xC0,0x3D,0xC7,{},{},{}},
		{ 0xC1,0x96,0x4D,{},{},{}},
		{ 0xC2,0x32,0x24,{},{},{}},
		{ 0xC3,0x53,0x34,{},{},{}},
		{ 0xC4,0xC9,0x5A,{},{},{}},
		{ 0xC5,0x23,0xF7,{},{},{}},
		{ 0xC6,0xC6,0xC4,{},{},{}},
		{ 0xC7,0xC5,0x90,{},{},{}},
		{ 0xC8,0x71,0x23,{},{},{}},
		{ 0xC9,0xA9,0xC9,{},{},{}},
		{ 0xCA,0xB3,0x3C,{},{},{}},
		{ 0xCB,0xC7,0xE2,{},{},{}},
		{ 0xE5,0x91,0xA7,{},{},{}},
		{ 0xEC,0xF7,0x51,
			{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x10,0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x33,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x60,0x61,0x62},
			{0x57,0x70,0x54,0x07,0x04,0x75,0x33,0x31,0x01,0x10,0x25,0x26,0x71,0x28,0x29,0x30,0x31,0x33,0x08,0x50,0x27,0x53,0x51,0x56,0x56,0x58,0x59,0x60,0x73,0x62},
			{0x60,0x04,0x07,0x08,0x30,0x63,0x73,0x50,0x53,0x25,0x75,0x00,0x27,0x62,0x01,0x54,0x31,0x33,0x71,0x51,0x52,0x06,0x55,0x72,0x28,0x31,0x10,0x05,0x61,0x74}}

};


BYTE ConvertC2S(unsigned char* data) { // Client to Server
	BYTE res = 0xFF;

	if (data[0] == 0xC1 || data[0] == 0xC3) {
		std::vector<_NEW_OPCODES_TWIST>::iterator iter;
		for (iter = g_vNewOpcTwist.begin(); iter != g_vNewOpcTwist.end(); iter++) {
			_NEW_OPCODES_TWIST opc = *iter;
			if (data[2] == opc.C2S) {
				data[2] = opc.HeadCode;
				res = opc.HeadCode;
				if (opc.SubH2.size()) {
					std::vector<BYTE>::iterator iter2;
					int index = 0;
					for (iter2 = opc.SubH2.begin(); iter2 != opc.SubH2.end(); iter2++) {
						BYTE b = *iter2;
						if (b == data[3]) {
							data[3] = opc.SubH1[index];
							break;
						}
						index++;
					}
				}
				break;
			}
		}
	}
	else if (data[0] == 0xC2 || data[0] == 0xC4) {
		std::vector<_NEW_OPCODES_TWIST>::iterator iter;
		for (iter = g_vNewOpcTwist.begin(); iter != g_vNewOpcTwist.end(); iter++) {
			_NEW_OPCODES_TWIST opc = *iter;
			if (data[3] == opc.C2S) {
				data[3] = opc.HeadCode;
				res = opc.HeadCode;
				if (opc.SubH2.size()) {
					std::vector<BYTE>::iterator iter2;
					int index = 0;
					for (iter2 = opc.SubH2.begin(); iter2 != opc.SubH2.end(); iter2++) {
						BYTE b = *iter2;
						if (b == data[4]) {
							data[4] = opc.SubH1[index];
							break;
						}
						index++;
					}
				}
				break;
			}
		}
	}

	return res;
}

BYTE ConvertS2C(unsigned char* data) { // Server to Client

	BYTE res = 0xFF;

	if (data[0] == 0xC1 || data[0] == 0xC3) {
		std::vector<_NEW_OPCODES_TWIST>::iterator iter;
		for (iter = g_vNewOpcTwist.begin(); iter != g_vNewOpcTwist.end(); iter++) {
			_NEW_OPCODES_TWIST opc = *iter;
			if (data[2] == opc.HeadCode) {
				data[2] = opc.S2C;
				res = opc.S2C;
				if (opc.SubH1.size()) {
					std::vector<BYTE>::iterator iter2;
					int index = 0;
					for (iter2 = opc.SubH1.begin(); iter2 != opc.SubH1.end(); iter2++) {
						BYTE b = *iter2;
						if (b == data[3]) {
							data[3] = opc.SubH3[index];
							break;
						}
						index++;
					}
				}
				break;
			}
		}
	}
	else if (data[0] == 0xC2 || data[0] == 0xC4) {
		std::vector<_NEW_OPCODES_TWIST>::iterator iter;
		for (iter = g_vNewOpcTwist.begin(); iter != g_vNewOpcTwist.end(); iter++) {
			_NEW_OPCODES_TWIST opc = *iter;
			if (data[3] == opc.HeadCode) {
				data[3] = opc.S2C;
				res = opc.S2C;
				if (opc.SubH1.size()) {
					std::vector<BYTE>::iterator iter2;
					int index = 0;
					for (iter2 = opc.SubH1.begin(); iter2 != opc.SubH1.end(); iter2++) {
						BYTE b = *iter2;
						if (b == data[4]) {
							data[4] = opc.SubH3[index];
							break;
						}
						index++;
					}
				}
				break;
			}
		}
	}

	return res;

}